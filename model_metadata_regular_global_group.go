/*
 * cityfalcon
 *
 * cityfalcon API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MetadataRegularGlobalGroup struct for MetadataRegularGlobalGroup
type MetadataRegularGlobalGroup struct {
	GroupId   *int64  `json:"groupId,omitempty"`
	GroupName *string `json:"groupName,omitempty"`
	GroupType *string `json:"groupType,omitempty"`
}

// NewMetadataRegularGlobalGroup instantiates a new MetadataRegularGlobalGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataRegularGlobalGroup() *MetadataRegularGlobalGroup {
	this := MetadataRegularGlobalGroup{}
	return &this
}

// NewMetadataRegularGlobalGroupWithDefaults instantiates a new MetadataRegularGlobalGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataRegularGlobalGroupWithDefaults() *MetadataRegularGlobalGroup {
	this := MetadataRegularGlobalGroup{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *MetadataRegularGlobalGroup) GetGroupId() int64 {
	if o == nil || o.GroupId == nil {
		var ret int64
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataRegularGlobalGroup) GetGroupIdOk() (*int64, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *MetadataRegularGlobalGroup) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int64 and assigns it to the GroupId field.
func (o *MetadataRegularGlobalGroup) SetGroupId(v int64) {
	o.GroupId = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *MetadataRegularGlobalGroup) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataRegularGlobalGroup) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *MetadataRegularGlobalGroup) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *MetadataRegularGlobalGroup) SetGroupName(v string) {
	o.GroupName = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *MetadataRegularGlobalGroup) GetGroupType() string {
	if o == nil || o.GroupType == nil {
		var ret string
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataRegularGlobalGroup) GetGroupTypeOk() (*string, bool) {
	if o == nil || o.GroupType == nil {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *MetadataRegularGlobalGroup) HasGroupType() bool {
	if o != nil && o.GroupType != nil {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given string and assigns it to the GroupType field.
func (o *MetadataRegularGlobalGroup) SetGroupType(v string) {
	o.GroupType = &v
}

func (o MetadataRegularGlobalGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupId != nil {
		toSerialize["groupId"] = o.GroupId
	}
	if o.GroupName != nil {
		toSerialize["groupName"] = o.GroupName
	}
	if o.GroupType != nil {
		toSerialize["groupType"] = o.GroupType
	}
	return json.Marshal(toSerialize)
}

type NullableMetadataRegularGlobalGroup struct {
	value *MetadataRegularGlobalGroup
	isSet bool
}

func (v NullableMetadataRegularGlobalGroup) Get() *MetadataRegularGlobalGroup {
	return v.value
}

func (v *NullableMetadataRegularGlobalGroup) Set(val *MetadataRegularGlobalGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataRegularGlobalGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataRegularGlobalGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataRegularGlobalGroup(val *MetadataRegularGlobalGroup) *NullableMetadataRegularGlobalGroup {
	return &NullableMetadataRegularGlobalGroup{value: val, isSet: true}
}

func (v NullableMetadataRegularGlobalGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataRegularGlobalGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
