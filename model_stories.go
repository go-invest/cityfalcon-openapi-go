/*
 * cityfalcon
 *
 * cityfalcon API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Stories struct for Stories
type Stories struct {
	NextPageToken *string  `json:"next_page_token,omitempty"`
	ExpandedQuery *string  `json:"expanded_query,omitempty"`
	Stories       *[]Story `json:"stories,omitempty"`
}

// NewStories instantiates a new Stories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStories() *Stories {
	this := Stories{}
	return &this
}

// NewStoriesWithDefaults instantiates a new Stories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoriesWithDefaults() *Stories {
	this := Stories{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *Stories) GetNextPageToken() string {
	if o == nil || o.NextPageToken == nil {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stories) GetNextPageTokenOk() (*string, bool) {
	if o == nil || o.NextPageToken == nil {
		return nil, false
	}
	return o.NextPageToken, true
}

// HasNextPageToken returns a boolean if a field has been set.
func (o *Stories) HasNextPageToken() bool {
	if o != nil && o.NextPageToken != nil {
		return true
	}

	return false
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *Stories) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

// GetExpandedQuery returns the ExpandedQuery field value if set, zero value otherwise.
func (o *Stories) GetExpandedQuery() string {
	if o == nil || o.ExpandedQuery == nil {
		var ret string
		return ret
	}
	return *o.ExpandedQuery
}

// GetExpandedQueryOk returns a tuple with the ExpandedQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stories) GetExpandedQueryOk() (*string, bool) {
	if o == nil || o.ExpandedQuery == nil {
		return nil, false
	}
	return o.ExpandedQuery, true
}

// HasExpandedQuery returns a boolean if a field has been set.
func (o *Stories) HasExpandedQuery() bool {
	if o != nil && o.ExpandedQuery != nil {
		return true
	}

	return false
}

// SetExpandedQuery gets a reference to the given string and assigns it to the ExpandedQuery field.
func (o *Stories) SetExpandedQuery(v string) {
	o.ExpandedQuery = &v
}

// GetStories returns the Stories field value if set, zero value otherwise.
func (o *Stories) GetStories() []Story {
	if o == nil || o.Stories == nil {
		var ret []Story
		return ret
	}
	return *o.Stories
}

// GetStoriesOk returns a tuple with the Stories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stories) GetStoriesOk() (*[]Story, bool) {
	if o == nil || o.Stories == nil {
		return nil, false
	}
	return o.Stories, true
}

// HasStories returns a boolean if a field has been set.
func (o *Stories) HasStories() bool {
	if o != nil && o.Stories != nil {
		return true
	}

	return false
}

// SetStories gets a reference to the given []Story and assigns it to the Stories field.
func (o *Stories) SetStories(v []Story) {
	o.Stories = &v
}

func (o Stories) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NextPageToken != nil {
		toSerialize["next_page_token"] = o.NextPageToken
	}
	if o.ExpandedQuery != nil {
		toSerialize["expanded_query"] = o.ExpandedQuery
	}
	if o.Stories != nil {
		toSerialize["stories"] = o.Stories
	}
	return json.Marshal(toSerialize)
}

type NullableStories struct {
	value *Stories
	isSet bool
}

func (v NullableStories) Get() *Stories {
	return v.value
}

func (v *NullableStories) Set(val *Stories) {
	v.value = val
	v.isSet = true
}

func (v NullableStories) IsSet() bool {
	return v.isSet
}

func (v *NullableStories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStories(val *Stories) *NullableStories {
	return &NullableStories{value: val, isSet: true}
}

func (v NullableStories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
