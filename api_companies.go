/*
 * cityfalcon
 *
 * cityfalcon API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// CompaniesApiService CompaniesApi service
type CompaniesApiService service

type ApiListStoriesRequest struct {
	ctx                _context.Context
	ApiService         *CompaniesApiService
	orderBy            *string
	categories         *string
	languages          *string
	minScore           *string
	foldSimilarStories *string
	timeFilter         *string
	assetClasses       *string
	limit              *string
	query              *string
}

func (r ApiListStoriesRequest) OrderBy(orderBy string) ApiListStoriesRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiListStoriesRequest) Categories(categories string) ApiListStoriesRequest {
	r.categories = &categories
	return r
}
func (r ApiListStoriesRequest) Languages(languages string) ApiListStoriesRequest {
	r.languages = &languages
	return r
}
func (r ApiListStoriesRequest) MinScore(minScore string) ApiListStoriesRequest {
	r.minScore = &minScore
	return r
}
func (r ApiListStoriesRequest) FoldSimilarStories(foldSimilarStories string) ApiListStoriesRequest {
	r.foldSimilarStories = &foldSimilarStories
	return r
}
func (r ApiListStoriesRequest) TimeFilter(timeFilter string) ApiListStoriesRequest {
	r.timeFilter = &timeFilter
	return r
}
func (r ApiListStoriesRequest) AssetClasses(assetClasses string) ApiListStoriesRequest {
	r.assetClasses = &assetClasses
	return r
}
func (r ApiListStoriesRequest) Limit(limit string) ApiListStoriesRequest {
	r.limit = &limit
	return r
}
func (r ApiListStoriesRequest) Query(query string) ApiListStoriesRequest {
	r.query = &query
	return r
}

func (r ApiListStoriesRequest) Execute() (Stories, *_nethttp.Response, error) {
	return r.ApiService.ListStoriesExecute(r)
}

/*
 * ListStories Method for ListStories
 * List properties of stories
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListStoriesRequest
 */
func (a *CompaniesApiService) ListStories(ctx _context.Context) ApiListStoriesRequest {
	return ApiListStoriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return Stories
 */
func (a *CompaniesApiService) ListStoriesExecute(r ApiListStoriesRequest) (Stories, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Stories
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompaniesApiService.ListStories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webapi/v1/stories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.orderBy == nil {
		return localVarReturnValue, nil, reportError("orderBy is required and must be specified")
	}

	if r.categories != nil {
		localVarQueryParams.Add("categories", parameterToString(*r.categories, ""))
	}
	localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	if r.languages != nil {
		localVarQueryParams.Add("languages", parameterToString(*r.languages, ""))
	}
	if r.minScore != nil {
		localVarQueryParams.Add("min_score", parameterToString(*r.minScore, ""))
	}
	if r.foldSimilarStories != nil {
		localVarQueryParams.Add("fold_similar_stories", parameterToString(*r.foldSimilarStories, ""))
	}
	if r.timeFilter != nil {
		localVarQueryParams.Add("time_filter", parameterToString(*r.timeFilter, ""))
	}
	if r.assetClasses != nil {
		localVarQueryParams.Add("asset_classes", parameterToString(*r.assetClasses, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
