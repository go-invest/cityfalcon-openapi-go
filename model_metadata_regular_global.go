/*
 * cityfalcon
 *
 * cityfalcon API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MetadataRegularGlobal struct for MetadataRegularGlobal
type MetadataRegularGlobal struct {
	TopicId      *int64                         `json:"topicId,omitempty"`
	TopicName    *string                        `json:"topicName,omitempty"`
	TopicTickers *[]string                      `json:"topicTickers,omitempty"`
	Groups       *[]MetadataRegularGlobalGroup  `json:"groups,omitempty"`
	Tickers      *[]MetadataRegularGlobalTicker `json:"tickers,omitempty"`
}

// NewMetadataRegularGlobal instantiates a new MetadataRegularGlobal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataRegularGlobal() *MetadataRegularGlobal {
	this := MetadataRegularGlobal{}
	return &this
}

// NewMetadataRegularGlobalWithDefaults instantiates a new MetadataRegularGlobal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataRegularGlobalWithDefaults() *MetadataRegularGlobal {
	this := MetadataRegularGlobal{}
	return &this
}

// GetTopicId returns the TopicId field value if set, zero value otherwise.
func (o *MetadataRegularGlobal) GetTopicId() int64 {
	if o == nil || o.TopicId == nil {
		var ret int64
		return ret
	}
	return *o.TopicId
}

// GetTopicIdOk returns a tuple with the TopicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataRegularGlobal) GetTopicIdOk() (*int64, bool) {
	if o == nil || o.TopicId == nil {
		return nil, false
	}
	return o.TopicId, true
}

// HasTopicId returns a boolean if a field has been set.
func (o *MetadataRegularGlobal) HasTopicId() bool {
	if o != nil && o.TopicId != nil {
		return true
	}

	return false
}

// SetTopicId gets a reference to the given int64 and assigns it to the TopicId field.
func (o *MetadataRegularGlobal) SetTopicId(v int64) {
	o.TopicId = &v
}

// GetTopicName returns the TopicName field value if set, zero value otherwise.
func (o *MetadataRegularGlobal) GetTopicName() string {
	if o == nil || o.TopicName == nil {
		var ret string
		return ret
	}
	return *o.TopicName
}

// GetTopicNameOk returns a tuple with the TopicName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataRegularGlobal) GetTopicNameOk() (*string, bool) {
	if o == nil || o.TopicName == nil {
		return nil, false
	}
	return o.TopicName, true
}

// HasTopicName returns a boolean if a field has been set.
func (o *MetadataRegularGlobal) HasTopicName() bool {
	if o != nil && o.TopicName != nil {
		return true
	}

	return false
}

// SetTopicName gets a reference to the given string and assigns it to the TopicName field.
func (o *MetadataRegularGlobal) SetTopicName(v string) {
	o.TopicName = &v
}

// GetTopicTickers returns the TopicTickers field value if set, zero value otherwise.
func (o *MetadataRegularGlobal) GetTopicTickers() []string {
	if o == nil || o.TopicTickers == nil {
		var ret []string
		return ret
	}
	return *o.TopicTickers
}

// GetTopicTickersOk returns a tuple with the TopicTickers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataRegularGlobal) GetTopicTickersOk() (*[]string, bool) {
	if o == nil || o.TopicTickers == nil {
		return nil, false
	}
	return o.TopicTickers, true
}

// HasTopicTickers returns a boolean if a field has been set.
func (o *MetadataRegularGlobal) HasTopicTickers() bool {
	if o != nil && o.TopicTickers != nil {
		return true
	}

	return false
}

// SetTopicTickers gets a reference to the given []string and assigns it to the TopicTickers field.
func (o *MetadataRegularGlobal) SetTopicTickers(v []string) {
	o.TopicTickers = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *MetadataRegularGlobal) GetGroups() []MetadataRegularGlobalGroup {
	if o == nil || o.Groups == nil {
		var ret []MetadataRegularGlobalGroup
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataRegularGlobal) GetGroupsOk() (*[]MetadataRegularGlobalGroup, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *MetadataRegularGlobal) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []MetadataRegularGlobalGroup and assigns it to the Groups field.
func (o *MetadataRegularGlobal) SetGroups(v []MetadataRegularGlobalGroup) {
	o.Groups = &v
}

// GetTickers returns the Tickers field value if set, zero value otherwise.
func (o *MetadataRegularGlobal) GetTickers() []MetadataRegularGlobalTicker {
	if o == nil || o.Tickers == nil {
		var ret []MetadataRegularGlobalTicker
		return ret
	}
	return *o.Tickers
}

// GetTickersOk returns a tuple with the Tickers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataRegularGlobal) GetTickersOk() (*[]MetadataRegularGlobalTicker, bool) {
	if o == nil || o.Tickers == nil {
		return nil, false
	}
	return o.Tickers, true
}

// HasTickers returns a boolean if a field has been set.
func (o *MetadataRegularGlobal) HasTickers() bool {
	if o != nil && o.Tickers != nil {
		return true
	}

	return false
}

// SetTickers gets a reference to the given []MetadataRegularGlobalTicker and assigns it to the Tickers field.
func (o *MetadataRegularGlobal) SetTickers(v []MetadataRegularGlobalTicker) {
	o.Tickers = &v
}

func (o MetadataRegularGlobal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TopicId != nil {
		toSerialize["topicId"] = o.TopicId
	}
	if o.TopicName != nil {
		toSerialize["topicName"] = o.TopicName
	}
	if o.TopicTickers != nil {
		toSerialize["topicTickers"] = o.TopicTickers
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.Tickers != nil {
		toSerialize["tickers"] = o.Tickers
	}
	return json.Marshal(toSerialize)
}

type NullableMetadataRegularGlobal struct {
	value *MetadataRegularGlobal
	isSet bool
}

func (v NullableMetadataRegularGlobal) Get() *MetadataRegularGlobal {
	return v.value
}

func (v *NullableMetadataRegularGlobal) Set(val *MetadataRegularGlobal) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataRegularGlobal) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataRegularGlobal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataRegularGlobal(val *MetadataRegularGlobal) *NullableMetadataRegularGlobal {
	return &NullableMetadataRegularGlobal{value: val, isSet: true}
}

func (v NullableMetadataRegularGlobal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataRegularGlobal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
